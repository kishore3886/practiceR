s=sample(balls,4,replace = TRUE)
number_of_redballs[i]=sum(s)
}
for(n in 1:games)
{
s=sample(balls,4,replace = TRUE)
number_of_redballs[n]=sum(s)
}
number_of_redballs
table(number_of_redballs)
qplot(number_of_redballs)+ xlab("number_of_redballs")+ylab("count")+ ggtitle("Distribution")
ggplot(number_of_redballs)+ xlab("number_of_redballs")+ylab("count")+ ggtitle("Distribution")
library(ggplot2)
library(ggthemes)
ggplot(number_of_redballs)+ xlab("number_of_redballs")+ylab("count")+ ggtitle("Distribution")
qplot(number_of_redballs)+
xlab("number_of_redballs")+ylab("count")+ ggtitle("Distribution")
e <- "x <- 1:10; sum(x)"
sloc(e,type="physical"))
sloc(e,type="physical")
install.packages("devtools")
library(devtools)
install_github("sgibb/sgtools")
sloc(e,type="physical")
library(sgibb/sgtools)
library("sgibb/sgtools")
#Measurement Project
# seed genereates random number
# this random number becomes seed for next random number
#middle square method
#size<-4
seed<-1234
seed_square=0
start=0
end=0
#rand_num_df<- data.frame(number=numeric())
rand_num_df<-numeric(100)
rand_generater<- function(){
#print(seed)
for(i in 1:100)
{
seed_square=seed*seed
seed_square_string<- toString(seed_square)
size=nchar(seed_square_string)
if(size/2!=0)
{
seed_square_string=paste("0",seed_square_string)
size=size+1
}
else
{}
start = floor(size/2)
end = start+digits-1
seed_char<-substr(seed_square_string, start, end)
print(seed_char)
seed<-as.numeric(seed_char)
rand_num_df [i]<-seed
}
return(rand_num_df)
}
cal_Minimum<-function(){
min_Number_Local= random_Numbers[3]
for(i in 1:100)
{
#print(i)
#rint(random_Numbers[i])
if(random_Numbers[i]<min_Number_Local)
{
min_Number_Local= random_Numbers[i]
}
}
return(min_Number_Local)
}
cal_Maximum<- function(){
max_Number_Local=0
for(i in 1:100)
{
if(random_Numbers[i]>max_Number_Local)
{
max_Number_Local<- random_Numbers[i]
}
else{}
}
return(max_Number_Local)
}
cal_Median<- function(){
random_Numbers_median_Local=0
#s<- length(random_Numbers)
#to find median first sort the vector
#copied into other data frame , as we will be performing manipulations on global variable
sorted_Random_Numbers<-random_Numbers
#Decreasing order
for (i in 1:99)
{
for (j in 1:99)
{
if (sorted_Random_Numbers[j] > sorted_Random_Numbers[j+1])
{
swap = sorted_Random_Numbers[j];
sorted_Random_Numbers[j]   = sorted_Random_Numbers[j+1];
sorted_Random_Numbers[j+1] = swap;
}
}
}
#sorting Done
if((s %% 2) == 0){
a<-s/2;
b<-a+1
random_Numbers_median_Local=(sorted_Random_Numbers[a]+to_sort[b])/2
}
if(!(s %% 2) == 0){
a<-ceiling(s/2) ;
random_Numbers_median_Local=sorted_Random_Numbers[a]
}
return(random_Numbers_median_Local)
}
cal_Mean<- function(){
sum_Random_Numbers=0
random_Numbers_Mean_local=0
for(i in 1:100)
{
sum_Random_Numbers<-sum_Random_Numbers+random_Numbers[i]
}
random_Numbers_Mean_local <- sum_Random_Numbers/100
return(random_Numbers_Mean_local)
}
cal_StandardDeviation<-function(){
standardDeviation_random_numbers=0
variance_random_numbers=0
for(i in random_Numbers)
variance_random_numbers =variance_random_numbers+ ((i - random_Numbers_Mean)^ 2);
standardDeviation_random_numbers= sqrt(variance_random_numbers/99)
}
cal_Mode<- function(){
maxCount <- 0;
modeValue <- 0;
for (i in 1:99)
{
for (j in 1:99)
{
if (sorted_Random_Numbers[j] > sorted_Random_Numbers[j+1])
{
swap = sorted_Random_Numbers[j];
sorted_Random_Numbers[j]   = sorted_Random_Numbers[j+1];
sorted_Random_Numbers[j+1] = swap;
}
}
}
tally<-numeric(100)
for (i in 1:99)
{
for(z in 1:9)
{
if(sorted_Random_Numbers[i]==sorted_Random_Numbers[z])
{
tally[i]=tally[i]+1
}
}
}
for (i in 1:100)
{
if (tally[i] > maxCount)
{
maxCount <- tally[i];
modeValue <- sorted_Random_Numbers[i];
}
}
print(maxCount)
return(modeValue)
}
#starts here----------------------------------------------------------------------
random_Numbers<- rand_generater()
min_Number<-cal_Minimum()
max_Number<-cal_Maximum()
random_Numbers_median<-cal_Median()
random_Numbers_Mean<-cal_Mean()
random_Numbers_StandardDeviation<-cal_StandardDeviation()
random_Numbers_Mode<-cal_Mode()
#syscal<-sd(random_Numbers)
# syscal
min_Number
max_Number
random_Numbers_Mean
random_Numbers_median
standardDeviation_random_numbers
random_Numbers_Mode
#Measurement Project
# seed genereates random number
# this random number becomes seed for next random number
#middle square method
digits<-4
seed<-9995
random_Numbers_median_Local<-0
start=0
end=0
#rand_num_df<- data.frame(number=numeric())
rand_num_df<-numeric(100)
rand_generater<- function(){
#print(seed)
for(i in 1:100)
{
seed_square<-seed*seed
seed_square_string<- toString(seed_square)
size<-nchar(seed_square_string)
if(size/2!=0)
{
seed_square_string=paste("0",seed_square_string)
size=size+1
}
else
{}
start = floor(size/2)
end_seed = start+digits-1
end=start+1
#for seed to the next random numer generating
seed_char<-substr(seed_square_string, start, end_seed)
#random number
rand_number_char<-substr(seed_square_string, start, end)
print(seed_char)
seed<-as.numeric(seed_char)
rand_Local<- as.numeric(rand_number_char)
rand_num_df [i]<-rand_Local
}
return(rand_num_df)
}
cal_Minimum<-function(){
min_Number_Local= random_Numbers[3]
for(i in 1:100)
{
#print(i)
#rint(random_Numbers[i])
if(random_Numbers[i]<min_Number_Local)
{
min_Number_Local= random_Numbers[i]
}
}
return(min_Number_Local)
}
cal_Maximum<- function(){
max_Number_Local=0
for(i in 1:100)
{
if(random_Numbers[i]>max_Number_Local)
{
max_Number_Local<- random_Numbers[i]
}
else{}
}
return(max_Number_Local)
}
cal_Median_Random<- function(){
random_Numbers_median_Local=0
#s<- length(random_Numbers)
#to find median first sort the vector
#copied into other data frame , as we will be performing manipulations on global variable
sorted_Random_Numbers<-random_Numbers
#Decreasing order
for (i in 1:99)
{
for (j in 1:99)
{
if (sorted_Random_Numbers[j] > sorted_Random_Numbers[j+1])
{
swap = sorted_Random_Numbers[j];
sorted_Random_Numbers[j]   = sorted_Random_Numbers[j+1];
sorted_Random_Numbers[j+1] = swap;
}
}
}
#sorting Done
if((s %% 2) == 0){
a<-s/2;
b<-a+1
random_Numbers_median_Local=(sorted_Random_Numbers[a]+to_sort[b])/2
}
if(!(s %% 2) == 0){
a<-ceiling(s/2) ;
random_Numbers_median_Local=sorted_Random_Numbers[a]
}
return(random_Numbers_median_Local)
}
cal_Mean<- function(){
sum_Random_Numbers=0
random_Numbers_Mean_local=0
for(i in 1:100)
{
sum_Random_Numbers<-sum_Random_Numbers+random_Numbers[i]
}
random_Numbers_Mean_local <- sum_Random_Numbers/100
return(random_Numbers_Mean_local)
}
cal_StandardDeviation<-function(){
standardDeviation_random_numbers=0
variance_random_numbers=0
for(i in random_Numbers)
variance_random_numbers =variance_random_numbers+ ((i - random_Numbers_Mean)^ 2);
standardDeviation_random_numbers= sqrt(variance_random_numbers/100)
}
cal_Mode<- function(){
maxCount <- 0;
modeValue <- 0;
sorted_Random_Numbers<-random_Numbers
for (i in 1:99)
{
for (j in 1:99)
{
if (sorted_Random_Numbers[j] > sorted_Random_Numbers[j+1])
{
swap = sorted_Random_Numbers[j];
sorted_Random_Numbers[j]   = sorted_Random_Numbers[j+1];
sorted_Random_Numbers[j+1] = swap;
}
}
}
tally<-numeric(100)
for (i in 1:99)
{
for(z in 1:99)
{
if(sorted_Random_Numbers[i]==sorted_Random_Numbers[z])
{
tally[i]=tally[i]+1
}
}
}
for (i in 1:100)
{
if (tally[i] > maxCount)
{
maxCount <- tally[i];
modeValue <- sorted_Random_Numbers[i];
}
}
print(maxCount)
return(modeValue)
}
fn <- function(){
sorted_Random_Numbers<-random_Numbers
#Decreasing order
for (i in 1:99)
{
for (j in 1:99)
{
if (sorted_Random_Numbers[j] > sorted_Random_Numbers[j+1])
{
swap = sorted_Random_Numbers[j];
sorted_Random_Numbers[j]   = sorted_Random_Numbers[j+1];
sorted_Random_Numbers[j+1] = swap;
}
}
}
sorted_Random_Numbers
#sorting Done
s<-length(sorted_Random_Numbers)
if((s %% 2) == 0){
a<-s/2;
b<-a+1
random_Numbers_median_Local<-(sorted_Random_Numbers[a]+sorted_Random_Numbers[b])/2
}
if(!(s %% 2) == 0){
a<-ceiling(s/2) ;
random_Numbers_median_Local<-sorted_Random_Numbers[a]
}
print(random_Numbers_median_Local)
return(random_Numbers_median_Local)
}
#starts here----------------------------------------------------------------------
random_Numbers<- rand_generater()
min_Number<-cal_Minimum()
max_Number<-cal_Maximum()
random_Numbers_Mean<-cal_Mean()
random_Numbers_StandardDeviation<-cal_StandardDeviation()
random_Numbers_Mode<-cal_Mode()
random_Numbers_Median<-fn()
random_Numbers
sorted_Random_Numbers
min_Number
max_Number
random_Numbers_Mean
random_Numbers_StandardDeviation
random_Numbers_Mode
random_Numbers_Median
#Testing the results------------------------------------------------
boxplot(random_Numbers)
#to show all numbers are generated randomly
plot(random_Numbers)
abline(a=0,b=1)
# testing for mean Hypothesis testing
test_cal <-t.test(random_Numbers, alternative = "two.sided",mu=60,conf.int=0.95)
test_cal
#df- Degrees of freedom
(49.91-60)/(sd(random_Numbers)/sqrt(length(random_Numbers)))
#-----------------SLOC------------------------------
bank <- read.csv("https://raw.githubusercontent.com/kshitijjain91/Credit-Risk-Capstone/master/datasets/Demogs_v1.csv")
str(bank)
head(bank)
head(bank$Income,25)
head(bank$Income)
income<- bank$Income
length((income))
n=25
k=400
sample_means<- vector(mode="numeric",length=k)
sample_means<- vector(mode="numeric",length=k)
for(sample_num in 1:k){
s<- sample(income,n,replace = FALSE)
sample_means[sample_num]<-s
}
warning()
sample_means
head(sample_means)
head(sample_means,10)
population_Mean<- mean(income,na.rm = TRUE)
population_Mean
mean_Of_SampleMean
mean_Of_SampleMean<- mean(sample_means,na.rm = TRUE)
population_Mean
mean_Of_SampleMean
population_sd<- sd(income)
population_sd_root_n<-population_sd/sqrt(n)
std_err<- sd(sample_means)
population_sd_root_n
std_err
population_sd<- sd(income,na.rm = TRUE)
population_sd_root_n<-population_sd/sqrt(n)
population_sd_root_n
std_err<- sd(sample_means,na.rm = TRUE)
sample_means<- data.frame(sample_means)
std_err<- sd(sample_means,na.rm = TRUE)
sample_means= vector(mode="numeric",length=k)
for(sample_num in 1:k){
s<- sample(income,n,replace = FALSE)
sample_means[sample_num]<-s
}
for(sample_num in 1:k){
s<- sample(income,n,replace = F)
sample_means[sample_num]<-mean(s,na.rm = T)
}
population_Mean<- mean(income,na.rm = TRUE)
mean_Of_SampleMean<- mean(sample_means,na.rm = TRUE)
population_Mean
mean_Of_SampleMean
population_sd<- sd(income,na.rm = TRUE)
population_sd_root_n<-population_sd/sqrt(n)
std_err<- sd(sample_means,na.rm = TRUE)
population_sd_root_n
std_err
sample_means<- data.frame(sample_means)
ggplot(sample_means,aes(sample_means))+geom_density()
n=5
k=400
#take sample of size n and store it in a vector
sample_means= vector(mode="numeric",length=k)
for(sample_num in 1:k){
s<- sample(income,n,replace = F)
sample_means[sample_num]<-mean(s,na.rm = T)
}
warning()
head(sample_means,10)
#population mean and sample mean
population_Mean<- mean(income,na.rm = TRUE)
mean_Of_SampleMean<- mean(sample_means,na.rm = TRUE)
population_Mean
mean_Of_SampleMean
#population sd
population_sd<- sd(income,na.rm = TRUE)
population_sd_root_n<-population_sd/sqrt(n)
std_err<- sd(sample_means,na.rm = TRUE)
population_sd_root_n
std_err
sample_means<- data.frame(sample_means)
ggplot(sample_means,aes(sample_means))+geom_density()
library(swirl)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install_course("hypothesistesting.csv")
install_course("hypothesistesting.swc")
q()
?seperate
?separate
library(dplyr)
?separate
?Separate
?separate()
newdata
popul<- read.csv("popularity.csv")
setwd("~/R/All Practice")
popul<- read.csv("popularity.csv")
library(tidyr)
names(popul)
newdata<- gather(popul,day,my_val,weekday_is_monday:weekday_is_sunday)
newdata<- newdata[!(newdata$my_val==0),]
?separate()
summary(popul)
head(newdata)
newdata<- separate(newdata,url,into = c("link","site"),sep="-")
newdata$link
newdata$site
newdata$day
newdata_seperated<- separate(newdata_seperated,day,into = c("type of day","day"))
newdata_seperated<- separate(newdata,day,into = c("type of day","day"))
newdata<- gather(popul,day,my_val,weekday_is_monday:weekday_is_sunday)
newdata<- newdata[!(newdata$my_val==0),]
newdata_seperated<- separate(newdata,day,into = c("type of day","day"), sep="-is-")
newdata_seperated$day
newdata$day
newdata<- gather(popul,day,my_val,weekday_is_monday:weekday_is_sunday)
newdata<- newdata[!(newdata$my_val==0),]
newdata_seperated<- separate(newdata,day,into = c("type of day","day"), sep="_is_")
newdata_seperated$day
newdata_seperated
mtcars
